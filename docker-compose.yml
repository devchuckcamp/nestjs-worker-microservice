version: '3.8'
services:
  redis:
    image: redis:7-alpine
    container_name: nest-worker-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - email-worker-network

  # NestJS Worker Application
  email-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: email-worker-app
    ports:
      - "3000:3000"
    environment:
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # SendGrid Configuration (replace with your actual key)
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-your-sendgrid-api-key}
      
      # Application Configuration
      - NODE_ENV=production
      - PORT=3000
      
      # Email Configuration
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-noreply@example.com}
      - DEFAULT_FROM_NAME=${DEFAULT_FROM_NAME:-Email Worker}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - email-worker-network

  redis-insight:
    image: redis/redisinsight:latest
    container_name: nest-worker-redis-insight
    ports:
      - "5540:5540"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - email-worker-network

volumes:
  redis_data:
    driver: local

networks:
  email-worker-network:
    driver: bridge